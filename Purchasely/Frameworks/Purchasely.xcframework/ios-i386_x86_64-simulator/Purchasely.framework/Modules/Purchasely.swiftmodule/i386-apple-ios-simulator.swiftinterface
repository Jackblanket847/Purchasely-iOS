// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Purchasely
import Foundation
@_exported import Purchasely
import StoreKit
import Swift
import SwiftyJSON
import UIKit
import WebKit
extension Array {
  public subscript(safe index: Swift.Int) -> Element? {
    get
  }
}
public func loc(_ textToTranslate: Swift.String, comment: Swift.String = "") -> Swift.String
extension NSNotification.Name {
  public static let ply_purchasedSubscription: Foundation.Notification.Name
}
@objc public enum PLYAlertMessage : Swift.Int {
  case inAppSuccess
  case inAppDeferred
  case inAppSuccessUnauthentified
  case inAppRestorationSuccess
  case inAppRestorationError
  case inAppError
  case unsubscribeAndroid
  public var title: Swift.String {
    get
  }
  public var content: Swift.String? {
    get
  }
  public var buttonTitle: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYEnvironment : Swift.Int {
  case prod
  case staging
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PLYError : Swift.Error {
  case application(message: Swift.String?, code: Swift.String?)
  case parsing
  case network(statusCode: Swift.Int?, error: Swift.Error?)
  case productNotFound
  case deferredPayment
  case alreadyPremium
  case absentReceipt
  case validationFailed
  case clientInvalid
  case paymentCancelled
  case paymentInvalid
  case paymentNotAllowed
  case storeProductNotAvailable
  case cloudServicePermissionDenied
  case cloudServiceNetworkConnectionFailed
  case cloudServiceRevoked
  case purchaseAlreadyRunning
  case restorationAlreadyRunning
  case noProductsToRestore
  case restorationFailedWithErrors([Swift.Error])
  case restorationPartial([Swift.String], [Swift.Error])
  case receiptValidationTimedOut
  case unknown
}
extension PLYError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum PLYEvent : Swift.Int {
  case appStarted
  case productPageViewed
  case loginTapped
  case purchaseFromStoreTapped
  case purchaseTapped
  case inAppPurchasing
  case inAppPurchased
  case inAppRenewed
  case receiptCreated
  case receiptValidated
  case receiptFailed
  case restoreStarted
  case inAppRestored
  case restoreSucceeded
  case restoreFailed
  case inAppDeferred
  case inAppPurchaseFailed
  case linkOpened
  public var name: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PluralType {
  case none
  case one
  case many
  public static func == (a: PluralType, b: PluralType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public func PLYLocalizedPluralString(_ key: Swift.String, count: Swift.Int) -> Swift.String
public func PLYLocalizedPluralString(_ key: Swift.String, pluralType: PluralType) -> Swift.String
@objc public class PLYLogger : ObjectiveC.NSObject {
  @objc public enum LogLevel : Swift.Int {
    case debug
    case info
    case warn
    case error
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc open class PLYJsonModel : ObjectiveC.NSObject {
  open var json: SwiftyJSON.JSON
  @objc override dynamic public init()
  required public init?(json: SwiftyJSON.JSON)
  open class func parse<T>(fromJsonArray jsonArray: [SwiftyJSON.JSON]) -> [T] where T : PLYJsonModel
  @objc deinit
}
@objc public class PLYPlan : PLYJsonModel {
  @objc public var vendorId: Swift.String
  @objc public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension PLYPlan {
  public var localizedFullPrice: Swift.String? {
    get
  }
  public var localizedPrice: Swift.String? {
    get
  }
  public var localizedPeriod: Swift.String? {
    get
  }
  public var hasIntroductoryPrice: Swift.Bool {
    get
  }
  public var localizedFullIntroductoryPrice: Swift.String? {
    get
  }
  public var localizedIntroductoryPrice: Swift.String? {
    get
  }
  public var localizedIntroductoryPeriod: Swift.String? {
    get
  }
  public var localizedIntroductoryDuration: Swift.String? {
    get
  }
}
@objc public class PLYProduct : PLYJsonModel {
  public var vendorId: Swift.String
  public var name: Swift.String? {
    get
    set
  }
  public var plans: [PLYPlan]? {
    get
    set
  }
  public var termsAndConditions: Swift.String? {
    get
    set
  }
  required public init?(json: SwiftyJSON.JSON)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PLYSubscription : PLYJsonModel {
  @objc public var plan: PLYPlan
  @objc public var subscriptionSource: PLYSubscriptionSource
  @objc public func unsubscribe()
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PLYSubscriptionSource : Swift.Int {
  case appStore
  case playStore
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PLYUIControllerType : Swift.Int {
  case subscriptionList
  case productPage
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PLYUIDelegate {
  @objc func display(controller: UIKit.UIViewController, type: PLYUIControllerType)
  @objc func display(alert: PLYAlertMessage, error: Swift.Error?)
}
public typealias PLYVoidClosure = () -> Swift.Void
public typealias PLYErrorClosure = (Swift.Error) -> ()
public typealias PLYJSONHandler = (SwiftyJSON.JSON) -> Swift.Void
@objc public protocol PLYEventDelegate {
  @objc func eventTriggered(_ event: PLYEvent, properties: [Swift.String : Any]?)
}
extension Purchasely {
  @objc public static var deviceKey: Swift.String {
    @objc get
  }
  @objc dynamic public class func start(withAPIKey apiKey: Swift.String, appUserId: Swift.String? = nil, eventDelegate: PLYEventDelegate? = nil, uiDelegate: PLYUIDelegate? = nil, logLevel: PLYLogger.LogLevel = .error)
  @objc dynamic public class func setEventDelegate(_ eventDelegate: PLYEventDelegate?)
  @objc dynamic public class func setUIDelegate(_ uiDelegate: PLYUIDelegate?)
  @objc dynamic public class func setAppUserId(_ appUserId: Swift.String?)
  @objc dynamic public class func isReadyToPurchase(_ ready: Swift.Bool)
  @objc dynamic public class func setEnvironment(_ environment: PLYEnvironment)
  @objc dynamic public class func setLogLevel(_ logLevel: PLYLogger.LogLevel)
  @objc dynamic public class func product(with vendorId: Swift.String, success: @escaping (PLYProduct) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public class func plan(with vendorId: Swift.String, success: @escaping (PLYPlan) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public class func userSubscriptions(success: @escaping ([PLYSubscription]?) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public class func productController(for productVendorId: Swift.String, success: @escaping (UIKit.UIViewController) -> Swift.Void, failure: @escaping (Swift.Error?) -> Swift.Void)
  @objc public static func purchase(plan: PLYPlan, success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
  @objc public static func restoreAllProducts(success: @escaping PLYVoidClosure, failure: @escaping PLYErrorClosure)
}
extension Purchasely : PLYUIDelegate {
  @objc dynamic public func display(controller: UIKit.UIViewController, type: PLYUIControllerType)
  @objc dynamic public func display(alert: PLYAlertMessage, error: Swift.Error?)
}
@objc public class Purchasely : ObjectiveC.NSObject {
  @objc deinit
}
@available(iOS 11.0, *)
extension SKProductStorePromotionController {
  public func resetStorePromotionsVisibility(for products: [StoreKit.SKProduct], completed: (() -> Swift.Void)?)
}
extension UIColor {
  public static func ply_fromHex(hex: Swift.String) -> UIKit.UIColor?
}
extension PLYAlertMessage : Swift.Equatable {}
extension PLYAlertMessage : Swift.Hashable {}
extension PLYAlertMessage : Swift.RawRepresentable {}
extension PLYEnvironment : Swift.Equatable {}
extension PLYEnvironment : Swift.Hashable {}
extension PLYEnvironment : Swift.RawRepresentable {}
extension PLYEvent : Swift.Equatable {}
extension PLYEvent : Swift.Hashable {}
extension PLYEvent : Swift.RawRepresentable {}
extension PluralType : Swift.Equatable {}
extension PluralType : Swift.Hashable {}
extension PLYLogger.LogLevel : Swift.Equatable {}
extension PLYLogger.LogLevel : Swift.Hashable {}
extension PLYLogger.LogLevel : Swift.RawRepresentable {}
extension PLYSubscriptionSource : Swift.Equatable {}
extension PLYSubscriptionSource : Swift.Hashable {}
extension PLYSubscriptionSource : Swift.RawRepresentable {}
extension PLYUIControllerType : Swift.Equatable {}
extension PLYUIControllerType : Swift.Hashable {}
extension PLYUIControllerType : Swift.RawRepresentable {}
